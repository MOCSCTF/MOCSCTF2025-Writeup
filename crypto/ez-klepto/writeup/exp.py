from hashlib import sha256
from gmpy2 import *
from Crypto.Util.number import *

def fermat(num):
    x = iroot(num, 2)[0]
    if x * x < num:
        x += 1

    # y^2 = x^2 - num
    while (True):
        y2 = x * x - num
        y = iroot(y2, 2)[0]
        if y * y == y2:
            break
        x += 1

    result = [int(x + y), int(x - y)]
    return result[0]

Y = 147533419754886904277727124856244346616956264280709689173255626491536402140956254894413948786370180385799712103011381728260612612123846041459301905793849218125914790743893573021066172482787350314732670171200008944306692059927354445469432837980920044531208854429170654469187034172559133416796921560533816266911
n = 8571430757393633647054817137727155989886957558541754914408107420787003508424564394945927571919168678100337237379078779425731903863558586391923497594170008813154671225006841398580512753655039432222891791388164136988066939396047689025334196818528707807582645026717886117760789433480843654269340606418725375882135517760506220720118172739338778945719007543943658625906681881382117511411519463793492223285122453174125739809663942654847878079861602537544051704875517511647020953713077718175603731882245245075001083297385098219043734025144916072700351731471489697266184003961754719935166038988567360080105571564310335500409
c = 6919346947875409161963577193581333582128743932256723127242982316832652772301025807175084851234139039021005911030276584098159198621581893410258310444936545782754865502304163274758272730928944859231182249954838078719049569874316542442489473402829709602498162597005874654958045491228702808253091407050221999861722008820532739680313935616368892928854682398662202664672646079149516167839944419722505008968493961455049331208748310698539152584268263350074360317220953377419181097905969015809719122029751439649977158369954371109789090602678356475055724372689489521240271566588677767848137104321202472275617324042952028771959

P = fermat(Y)
Q = Y//P
assert P * Q == Y
d = inverse(65537,(P-1)*(Q-1))

c_s = int(bin(n)[2:1023+2],2)
s = pow(c_s,d,Y)
p = next_prime(int(sha256(str(s).encode()*4).hexdigest(),16))

if gcd(p,n) > 1:
    print('get p',p)
    q = n//p
    phi = (p-1)*(q-1)
    d = inverse(65537,phi)
    print(long_to_bytes(pow(c,d,n)).decode())


